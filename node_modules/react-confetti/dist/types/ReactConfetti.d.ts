import React, { CanvasHTMLAttributes } from 'react';
import Confetti, { IConfettiOptions } from './Confetti';
interface ComponentProps extends IConfettiOptions {
    [key: string]: any;
}
export declare type Props = ComponentProps & CanvasHTMLAttributes<HTMLCanvasElement>;
export default class ReactConfetti extends React.Component<Props> {
    static defaultProps: {
        colors: string[];
        gravity: number;
        wind: number;
        friction: number;
        opacity: number;
        drawShape?: ((context: CanvasRenderingContext2D) => void) | undefined;
        run: boolean;
        recycle: boolean;
        numberOfPieces: number;
        debug: boolean;
        tweenFunction: (currentTime: number, currentValue: number, targetValue: number, duration: number, s?: number | undefined) => number;
        tweenDuration: number;
        width: number;
        height: number;
    };
    canvas: React.RefObject<HTMLCanvasElement>;
    confetti?: Confetti;
    componentDidMount(): void;
    componentWillReceiveProps(nextProps: Props): void;
    render(): JSX.Element;
}
export {};
